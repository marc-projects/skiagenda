//const ical = require('ical')

module.exports = class Holidays {
    constructor(ddb, ical) {
        this.ddb = ddb
        this.ical = ical
    }

    // erase all previous records
    wipe() {
        console.log("Holidays::wipe")
        const params = {
            TableName: 'Holidays',
            Key: { 'hid' : '*' }
        }
        return this.ddb.delete(params).promise()
    }

    // list all records
    list() {
        console.log("Holidays::list")
        const params = { 
            TableName : 'Holidays',
        }
        return this.ddb.scan(params).promise()
    }

    // import current and next year schedule
    // for a given area (A, B, C)
    import(zone, url) {
        console.log("Holidays::import")
        this.getCalendar(url)
        .then(d => {
            //console.log(d)
            var hid = 1
            d.forEach(item => {
                item.hid = "H" + hid++
                item.zone = zone
                item.creationTime = new Date().toISOString()
                const params = {
                    TableName: 'Holidays',
                    Item: item,
                }
                this.ddb.put(params, (err, data) => {
                    if (err) {
                        console.error("Unable to add item. Error JSON:", JSON.stringify(err, null, 2));
                    }
                })
            })
        })
        .catch(e => {
            console.log(e)
        })
        // have to work on a promise encapsulation
        return true
    }
    
    _getCalendar(url, onSuccess, onFailure) {
        this.ical.fromURL(url, {}, (e, d) => { 
            if (e) onFailure(e) 
            else {
                var res = []
                for (let k in d) {
                    if (d.hasOwnProperty(k)) {
                        var ev = d[k]
                        if (d[k].type == 'VEVENT') {
                            if (ev.end) {
                                res.push({
                                    summary: ev.summary,
                                    start: ev.start.toISOString(),
                                    end: ev.end.toISOString()
                                })
                            }
                        }
                    }
                }
                //console.log(res)
                onSuccess(res)
            } 
        })
    }

    getCalendar(url) { 
        return new Promise((onSuccess, onFailure) => this._getCalendar(url, onSuccess, onFailure)) 
    }
}
