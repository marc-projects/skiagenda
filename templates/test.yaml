AWSTemplateFormatVersion: "2010-09-09"
Description: Prepare new instructions
Parameters:
  SourceBucketName:
    Type: String
    Description: The name for the bucket where all static resources have been uploaded before
    Default: skiagenda-source
  WebsiteBucketName:
    Type: String
    Description: The name for the bucket hosting your website
    Default: skiagenda
Resources:
  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
#      AuthorizationType: COGNITO_USER_POOLS
      AuthorizationType: NONE
#      OperationName: !Ref addReservation
      Integration:
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
  GatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - Method
    Properties:
      RestApiId: !Ref RestApi
      StageName: call
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      FunctionName: myfunction
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:RestApi/*/POST/"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/myfunction:*"
          PolicyName: "lambda"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/myfunction"
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://RestApi.execute-api.${AWS::Region}.amazonaws.com/call"
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
  
  # GatewayResponse:
  #   Type: AWS::ApiGateway::GatewayResponse
  #   Properties:
  #     ResponseParameters:
  #       gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  #       gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
  #     ResponseType: MISSING_AUTHENTICATION_TOKEN
  #     RestApiId: !Ref RestApi
  #     StatusCode: '404'
  # # create an authorizer that will control access to this API 
  # # using the CognitoPool we created before
  # Authorizer:
  #   Type: 'AWS::ApiGateway::Authorizer'
  #   Properties:
  #     ProviderARNs: 
  #       - 'arn:aws:cognito-idp:us-east-1:686723865281:userpool/us-east-1_9Lmit9qrf'
  #     AuthorizerResultTtlInSeconds: '300'
  #     Type: COGNITO_USER_POOLS
  #     IdentitySource: method.request.header.Auth
  #     Name: RestApiAuthorizer
  #     RestApiId: !Ref RestApi
  # # create a resource
  # Resa:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref RestApi
  #     ParentId: !GetAtt 
  #       - RestApi
  #       - RootResourceId
  #     PathPart: resa
