AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a static website using S3

# input parameters of the template
Parameters:
  SourceBucketName:
    Type: String
    Description: The name for the bucket where all static resources have been uploaded before
    Default: skiagenda-source
  WebsiteBucketName:
    Type: String
    Description: The name for the bucket hosting your website
    Default: skiagenda

Resources:

  # S3 bucket containing the Web site content
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref WebsiteBucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  # access policy for the previous bucket
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"
  
  # object triggering the invokation of the copy function
  TriggerCopy:
   Type: "Custom::S3Objects"
   Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: !Ref SourceBucketName
      SourcePrefix: !Sub "website/"
      Bucket: !Ref Bucket

  # the role and access rights the function will get
  CopyS3ObjectsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement: 
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: S3Access
          PolicyDocument:
            Statement: 
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Sid: SourceBucketReadAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource: "*"
              - Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource: "*"

  # function used to copy content from one S3 bucket to another 
  CopyS3ObjectsFunction:  
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt CopyS3ObjectsRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError
          client = boto3.client('s3')
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''
            result = cfnresponse.SUCCESS
            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED
            cfnresponse.send(event, context, result, {})

          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                print 'copy {} to {}'.format(key, dest_key)
                client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS

  # Cognito pool to register and authenticate users
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: skiagenda
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  # Cognito client app
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: skiagenda
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  # Invoke a custom function to patch the website cognito config file
  TriggerUpdate:
    Type: "Custom::ConfigFile"
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      UserPool: !Ref UserPool
      Client: !Ref UserPoolClient
      Region: !Ref "AWS::Region"
      Bucket: !Ref WebsiteBucketName
  
  # Role used by the custom function to patch the website cognito config file
  UpdateConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /skiagenda/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UpdateConfigRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Logging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Sid: Cognito
                Effect: Allow
                Action:
                  - "cognito-idp:CreateUserPool"
                  - "cognito-idp:DeleteUserPool"
                  - "cognito-idp:CreateUserPoolClient"
                  - "cognito-idp:DeleteUserPoolClient"
                Resource: "*"
              - Sid: ConfigBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                Resource:
                  - !Sub "arn:aws:s3:::${WebsiteBucketName}/*"
  
  # the custom function used to patch the website cognito config file
  UpdateConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: ...
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt UpdateConfigRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          s3 = boto3.resource('s3')

          def create(properties, physical_id):
            userPoolId = properties['UserPool']
            clientId = properties['Client']
            region = properties['Region']
            bucket = properties['Bucket']
            object = s3.Object(bucket, 'js/config.js')
            config_content = """
          var _config = {
              cognito: {
                  userPoolId: '%s', // e.g. us-east-2_uXboG5pAb
                  userPoolClientId: '%s', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv
                  region: '%s', // e.g. us-east-2
              },
              api: {
                  invokeUrl: 'Base URL of your API including the stage', // e.g. https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod'
              }
          };
              """
            config_content = config_content % (userPoolId, clientId, region)
            config = s3.Object(bucket,'js/config.js')
            config.put(Body=config_content)
            return cfnresponse.SUCCESS, None

          def update(properties, physical_id):
            return create(properties, physical_id)

          def delete(properties, physical_id):
            return cfnresponse.SUCCESS, physical_id

          def handler(event, context):
            print "Received event: %s" % json.dumps(event)
            status = cfnresponse.FAILED
            new_physical_id = None
            try:
              properties = event.get('ResourceProperties')
              physical_id = event.get('PhysicalResourceId')
              status, new_physical_id = {
                'Create': create,
                'Update': update,
                'Delete': delete
              }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
            except Exception as e:
              print "Exception: %s" % e
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, {}, new_physical_id)
  
  # DynamoDB tables
  Reservations:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Reservations"
      AttributeDefinitions: 
        - AttributeName: "resaid"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "resaid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  Users:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Users"
      AttributeDefinitions: 
        - AttributeName: "userid"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "userid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  Holidays:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Holidays"
      AttributeDefinitions: 
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  # Role for backend lambda granting access to DynamoDB
  BackendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:PutItem
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # the function used to insert a reservation for a given period
  AddReservationFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: addReservation.handler
      Runtime: nodejs8.10
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: backend/functions.zip

  # create a REST API that will expose our lambda functions
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: skiagenda

  # create an authorizer that will control access to this API 
  # using the CognitoPool we created before
  RestApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    DependsOn:
      - "RestApi"
    Properties:
      ProviderARNs: 
        - !GetAtt UserPool.Arn
      AuthorizerResultTtlInSeconds: '300'
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Auth
      Name: skiagenda
      RestApiId: !Ref RestApi

  # create a resource
  Resa:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - "RestApi"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: resa

  # then a method
  Method:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - "Resa"
      - "AddReservationFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "POST"
      # AuthorizationType: NONE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "AddReservationFunction.Arn"
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi

  # then a deployemt & stage
  GatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "Method"
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod

  # grant the API gateway the right to invoke addReservationFunciton
  InvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "AddReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/resa"
  
Outputs:
  websiteURL:
    Value: !GetAtt Bucket.WebsiteURL
#  apiURL:
#    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${GatewayDeployment.StageName}"

