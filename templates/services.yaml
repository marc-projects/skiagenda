AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a static website using S3, then a backend with API GW, Cognito, lambdas and DynamoDB

# input parameters of the template
Parameters:
  SourceBucketName:
    Type: String
    Description: The name for the bucket where all static resources have been uploaded before
    Default: skiagenda-rawdata

  # TO BE REVIEWED
  #WebsiteBucketName:
  #  Type: String
  #  Description: The name for the bucket hosting your website
  #  Default: skiagenda

Resources:
  # Cognito identity management
  UserPool:
    Type: AWS::Cognito::UserPool
    Description: Cognito pool to register and authenticate users
    Properties:
      UserPoolName: skiagenda
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Description: Cognito client app
    Properties:
      ClientName: skiagenda
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  # TO BE REVIEWED
  # Config update
  # TriggerUpdate:
  #   Type: "Custom::ConfigFile"
  #   Description: "Invoke a custom function to patch the website cognito config file"
  #   DependsOn:
  #     - "Deployment"
  #   Properties:
  #     ServiceToken: !GetAtt UpdateConfigFunction.Arn
  #     UserPool: !Ref UserPool
  #     Client: !Ref UserPoolClient
  #     Region: !Ref "AWS::Region"
  #     Url: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  #     Bucket: !Ref WebsiteBucketName
  # UpdateConfigRole:
  #   Type: AWS::IAM::Role
  #   Description: "Role used by the custom function to patch the website cognito config file"
  #   Properties:
  #     Path: /skiagenda/
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: UpdateConfigRole
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Sid: Logging
  #               Effect: Allow
  #               Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Resource: "*"
  #             - Sid: Cognito
  #               Effect: Allow
  #               Action:
  #                 - "cognito-idp:CreateUserPool"
  #                 - "cognito-idp:DeleteUserPool"
  #                 - "cognito-idp:CreateUserPoolClient"
  #                 - "cognito-idp:DeleteUserPoolClient"
  #               Resource: "*"
  #             - Sid: ConfigBucketWriteAccess
  #               Effect: Allow
  #               Action:
  #                 - "s3:PutObject"
  #                 - "s3:PutObjectAcl"
  #                 - "s3:PutObjectVersionAcl"
  #               Resource:
  #                 - !Sub "arn:aws:s3:::${WebsiteBucketName}/*"
  # UpdateConfigFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: "the custom function used to patch the website config file"
  #     Handler: index.handler
  #     Runtime: python2.7
  #     Role: !GetAtt UpdateConfigRole.Arn
  #     Timeout: 60
  #     Code:
  #       ZipFile: |
  #         import json
  #         import boto3
  #         import cfnresponse
  #         s3 = boto3.resource('s3')
  #         def create(properties, physical_id):
  #           userPoolId = properties['UserPool']
  #           clientId = properties['Client']
  #           region = properties['Region']
  #           bucket = properties['Bucket']
  #           url = properties['Url']
  #           object = s3.Object(bucket, 'js/config.js')
  #           config_content = """
  #         var _config = {
  #             cognito: { 
  #                 userPoolId: '%s', // patched
  #                 userPoolClientId: '%s', 
  #                 region: '%s', 
  #             },
  #             api: {
  #                 invokeUrl: '%s',
  #             }
  #         };
  #             """
  #           config_content = config_content % (userPoolId, clientId, region, url)
  #           config = s3.Object(bucket,'js/config.js')
  #           config.put(Body=config_content)
  #           return cfnresponse.SUCCESS, None
  #         def update(properties, physical_id):
  #           return create(properties, physical_id)
  #         def delete(properties, physical_id):
  #           return cfnresponse.SUCCESS, physical_id
  #         def handler(event, context):
  #           print "Received event: %s" % json.dumps(event)
  #           status = cfnresponse.FAILED
  #           new_physical_id = None
  #           try:
  #             properties = event.get('ResourceProperties')
  #             physical_id = event.get('PhysicalResourceId')
  #             status, new_physical_id = {
  #               'Create': create,
  #               'Update': update,
  #               'Delete': delete
  #             }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
  #           except Exception as e:
  #             print "Exception: %s" % e
  #             status = cfnresponse.FAILED
  #           finally:
  #             cfnresponse.send(event, context, status, {}, new_physical_id)
  # UpdateConfigLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Join ['/', ['/aws/lambda', !Ref UpdateConfigFunction]]
  #     RetentionInDays: 7 # days
              
  # lambda functions
  BackendRole:
    Type: AWS::IAM::Role
    Description: "Role for backend lambda granting access to DynamoDB"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - dynamodb:*
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  # reservations functions
  AddReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to insert a reservation for a given period"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: addReservation.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip
  AddReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref AddReservationFunction]]
      RetentionInDays: 7 # days
  ListReservationsFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list reservations over 3 months"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: listReservations.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip        
  ListReservationsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref ListReservationsFunction]]
      RetentionInDays: 7 # days
  DeleteReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to delete a particular reservations"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: deleteReservation.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip
  DeleteReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref DeleteReservationFunction]]
      RetentionInDays: 7 # days
  UpdateReservationFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to update a particular reservations"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: updateReservation.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/reservations.zip        
  UpdateReservationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref UpdateReservationFunction]]
      RetentionInDays: 7 # days
  # holidays functions
  ListHolidaysFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list bank holidays for the 3 zones in France"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: listHolidays.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/holidays.zip        
  ListHolidaysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref ListHolidaysFunction]]
      RetentionInDays: 7 # days
  RefreshHolidaysFunction:
    Type: AWS::Lambda::Function
    Description: "The function used to list bank holidays for the 3 zones in France"
    DependsOn:
      - "BackendRole"
    Properties:
      Handler: refreshHolidays.handler
      Runtime: nodejs10.x
      Role: !GetAtt BackendRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref SourceBucketName
        S3Key: services/holidays.zip                
  RefreshHolidaysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref RefreshHolidaysFunction]]
      RetentionInDays: 7 # days

  # API Gateway exposing our lambda functions
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Description: create a REST API that will expose our lambda functions
    Properties:
      Name: skiagenda
  RestApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Description: "create an authorizer that will control access to this API using the CognitoPool we created before"
    DependsOn:
      - "RestApi"
      - "UserPool"
    Properties:
      ProviderARNs: 
        - !GetAtt UserPool.Arn
      AuthorizerResultTtlInSeconds: '300'
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: skiagenda
      RestApiId: !Ref RestApi
  Resa:
    Type: 'AWS::ApiGateway::Resource'
    Description: "create a resource"
    DependsOn:
      - "RestApi"
      - "RestApiAuthorizer"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: resa
  Holidays:
    Type: 'AWS::ApiGateway::Resource'
    Description: "create a resource"
    DependsOn:
      - "RestApi"
      - "RestApiAuthorizer"
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt 
        - RestApi
        - RootResourceId
      PathPart: holidays
  ResaOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: Enable CORS on our resource
    Properties:
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  HolidaysOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: Enable CORS on our resource
    Properties:
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  PostMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "AddReservationFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "POST"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "AddReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
  ResaGetMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "ListReservationsFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ListReservationsFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"month\": \"$input.params('month')\"}"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
  HolidaysGetMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Holidays"
      - "ListHolidaysFunction"
      - "RestApiAuthorizer"
      - "RestApi"
    Properties:
      HttpMethod: "GET"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ListHolidaysFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: "{\"month\": \"$input.params('month')\"}"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
  ResaUpdateMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "UpdateReservationFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "PUT"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "UpdateReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
  HolidaysRefreshMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Holidays"
      - "RefreshHolidaysFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "PUT"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "RefreshHolidaysFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        #PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Holidays
      RestApiId: !Ref RestApi
  DeleteMethod:
    Type: AWS::ApiGateway::Method
    Description: "then a method"
    DependsOn:
      - "Resa"
      - "DeleteReservationFunction"
      - "RestApiAuthorizer"
    Properties:
      HttpMethod: "DELETE"
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DeleteReservationFunction.Arn"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: ''
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
      ResourceId: !Ref Resa
      RestApiId: !Ref RestApi
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Description: "then a deployemt & stage"
    DependsOn:
      - "ResaGetMethod"
      - "HolidaysGetMethod"
      - "PostMethod"
      - "ResaOptionsMethod"
      - "HolidaysOptionsMethod"
      - "DeleteMethod"
      - "ResaUpdateMethod"
      - "HolidaysRefreshMethod"
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod
  InvokeResaGetPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke listReservationsFunction"
    DependsOn:
      - "ResaGetMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ListReservationsFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/resa"
  InvokeHolidaysGetPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke listReservationsFunction"
    DependsOn:
      - "HolidaysGetMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ListHolidaysFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/holidays"
  InvokeResaPostPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke addReservationFunction"
    DependsOn:
      - "PostMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "AddReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/resa"
  InvokeHolidaysPutPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke addReservationFunction"
    DependsOn:
      - "HolidaysRefreshMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "RefreshHolidaysFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/holidays"
  InvokePutPermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke updateReservationFunction"
    DependsOn:
      - "ResaUpdateMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "UpdateReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/PUT/resa"
  InvokeDeletePermission:
    Type: "AWS::Lambda::Permission"
    Description: "grant the API gateway the right to invoke deleteReservationFunction"
    DependsOn:
      - "DeleteMethod"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "DeleteReservationFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/DELETE/resa"

Outputs:
  apiURL:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/resa"
  userPoolId: 
    Value: !Ref UserPool
  userPollClientId: 
    Value: !Ref UserPoolClient
